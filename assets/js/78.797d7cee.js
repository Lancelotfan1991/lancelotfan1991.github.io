(window.webpackJsonp=window.webpackJsonp||[]).push([[78],{423:function(t,a,s){"use strict";s.r(a);var e=s(42),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"webpack与babel"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#webpack与babel"}},[t._v("#")]),t._v(" Webpack与Babel")]),t._v(" "),s("h4",{attrs:{id:"_1，为什么要有babel？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1，为什么要有babel？"}},[t._v("#")]),t._v(" 1，为什么要有babel？")]),t._v(" "),s("p",[t._v("*Es6语法")]),t._v(" "),s("p",[t._v("*jsx")]),t._v(" "),s("p",[t._v("*typescript")]),t._v(" "),s("h4",{attrs:{id:"_2，babel是什么？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2，babel是什么？"}},[t._v("#")]),t._v(" 2，babel是什么？")]),t._v(" "),s("p",[t._v("babel本质上是个工具链。主要用于旧浏览器或者环境中，将ECMAScript 2015+代码转换为向后兼容版本的Javascript。")]),t._v(" "),s("p",[t._v("包栝： 语法转换，源代码转换，Polyfill实现目标环境缺少的功能等。")]),t._v(" "),s("h4",{attrs:{id:"_3，如何使用。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3，如何使用。"}},[t._v("#")]),t._v(" 3，如何使用。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("npm install @babel/core -d\n")])])]),s("p",[t._v("想要直接通过命令行工具，使用babel，还需要：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("npm install @babel/cli -d\n")])])]),s("p",[t._v("之后可以通过babel直接处理对应的js文件：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("npx babel src --out-dir result\n")])])]),s("h4",{attrs:{id:"_4，一些常用的babel插件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4，一些常用的babel插件"}},[t._v("#")]),t._v(" 4，一些常用的babel插件")]),t._v(" "),s("h5",{attrs:{id:"（1）箭头函数转化插件：plugin-transform-arrow-function"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#（1）箭头函数转化插件：plugin-transform-arrow-function"}},[t._v("#")]),t._v(" （1）箭头函数转化插件：plugin-transform-arrow-function")]),t._v(" "),s("p",[t._v("可以将箭头函数转化为function。")]),t._v(" "),s("h5",{attrs:{id:"（2）const转化为var：plugin-transform-block-scoping。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#（2）const转化为var：plugin-transform-block-scoping。"}},[t._v("#")]),t._v(" （2）const转化为var：plugin-transform-block-scoping。")]),t._v(" "),s("p",[t._v("可以将const转化为var。")]),t._v(" "),s("h4",{attrs:{id:"_5，直接使用预设。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5，直接使用预设。"}},[t._v("#")]),t._v(" 5，直接使用预设。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("npm install @babel/preset-env -d\n")])])]),s("p",[t._v("这个命令相当于一系列插件的合集。")]),t._v(" "),s("p",[t._v("安装预设后，再使用babel：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("npx babel src --out-dir result --preset=@babel/preset-env\n")])])]),s("h4",{attrs:{id:"_6，babel的底层原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6，babel的底层原理"}},[t._v("#")]),t._v(" 6，babel的底层原理")]),t._v(" "),s("p",[t._v("我们平常编写的代码将会首先parsing 转化为ast（Abstract syntax tree，抽象语法树），再transfomation转化为字节码（Byte Code），最后由v8引擎处理。")]),t._v(" "),s("p",[t._v("因此babel事实上可以看做成一种javascript编译器。")]),t._v(" "),s("h4",{attrs:{id:"_7，在webpack中使用babel"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7，在webpack中使用babel"}},[t._v("#")]),t._v(" 7，在Webpack中使用babel")]),t._v(" "),s("p",[t._v("（1）安装babel-loader")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("npm install babel-loader -d\n")])])]),s("p",[t._v("（2）在webpack-config.js中设置对应的rules")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('module: [\n\trules: [\n\t\t{\n\t\t\ttest: /\\.js$/,\n\t\t\tuse: {\n\t\t\t\tloader: \'babel-loader\',\n\t\t\t\toptions: {\n\t\t\t\t\tplugins: [\n\t\t\t\t\t\t"@babel/plugin-transform-arrow-function",\n\t\t\t\t\t\t"@babel/plugin-transfrom-block-scoping"\n\t\t\t\t\t]\n\t\t\t\t\t\n\t\t\t\t\t// 或者直接使用预设\n\t\t\t\t\tpreset： [\n\t\t\t\t\t\t"@babel/preset-env"\n\t\t\t\t\t]\n\t\t\t\t}\t\n\t\t\t}\n\t\t}\n\t]\n]\n')])])]),s("h4",{attrs:{id:"_8，-browserlistrc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8，-browserlistrc"}},[t._v("#")]),t._v(" 8，.browserlistrc")]),t._v(" "),s("p",[t._v("（1）通常意义上的broswerlistrc文件")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("> 1%\nlast 2 version\nnot dead\n")])])]),s("p",[t._v("（2）如果我们只希望适配特定的浏览器，比如chrome 88，那么可以直接写：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("chrome 88\n")])])]),s("p",[t._v("（3）我们还可以在webpack.config.js中，直接设置目标：")]),t._v(" "),s("p",[t._v("这时，webpack.config.js中的配置是优先生效的。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('presets: [\n\t["babel/preset-env", {\n\t\ttargets: ["chrome 88"]\n\t}]\n]\n')])])]),s("h4",{attrs:{id:"_9，polyfill"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_9，polyfill"}},[t._v("#")]),t._v(" 9，polyfill")]),t._v(" "),s("p",[t._v("polyfill类似于一种补丁，可以帮助我们更好地使用javascript。")]),t._v(" "),s("p",[t._v("比如：Promise，Generator，Symbol以及某些实例方法比如Array.prototype.includes等特性。")]),t._v(" "),s("p",[t._v("如何设置webpack如何使用polyfill？")]),t._v(" "),s("p",[t._v("可以通过useBuiltIns来控制：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('presets: [\n\t["babel/preset-env", {\n\t\t// useBuiltIns: 可以设置下面三个值：\n\t\t// false: 不用任何polyfill相关的代码\n\t\t// usage：代码中需要哪些polyfill，就使用哪些相关的api\n\t\t// entry：需要自己手动在入口文件中添加corejs和regenerator-runtime,相应的代码体积也会加大。这个时候，会跟据目标浏览器引用。\n\t\tuseBuiltIns: ["chrome 88"]，\n\t\tcorejs: 3\n\t}]\n]\n')])])]),s("p",[t._v("当设置为entry时，需要添加的代码：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("import  'core-js/stable';\nimport\t'regenerator-runtime/runtime';\n")])])]),s("h4",{attrs:{id:"_10，plugin-transform-runtime"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10，plugin-transform-runtime"}},[t._v("#")]),t._v(" 10，plugin-transform-runtime")]),t._v(" "),s("p",[t._v("当我们编写第三方库或者写工具时，不应当希望使用的polyfill污染全局。所以建议使用plugin-transform-runtime。")]),t._v(" "),s("h4",{attrs:{id:"_11，react的jsx支持"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_11，react的jsx支持"}},[t._v("#")]),t._v(" 11，react的jsx支持")]),t._v(" "),s("h4",{attrs:{id:"_12，ts-loader"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_12，ts-loader"}},[t._v("#")]),t._v(" 12，ts-loader")]),t._v(" "),s("p",[t._v("typescript已经提供了typescript compiler，用于直接转化typescript。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("tsc index.ts\n")])])]),s("p",[t._v("通过以下指令可以生成tsconfig.json：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("tsc --init\n")])])]),s("p",[t._v("然后在webpack.config.js中使用：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('{\n\ttest: /\\.ts$\\/,\n\tuse: "ts-loader"\n}\n')])])])])}),[],!1,null,null,null);a.default=r.exports}}]);