(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{403:function(t,a,s){"use strict";s.r(a);var n=s(42),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h3",{attrs:{id:"常用的正则表达式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常用的正则表达式"}},[t._v("#")]),t._v(" 常用的正则表达式")]),t._v(" "),s("h4",{attrs:{id:"_1，验证是否是有效数字"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1，验证是否是有效数字"}},[t._v("#")]),t._v(" 1，验证是否是有效数字")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*\n *规则分析：\n *1.可能出现+,-也可能不出现  ^[+-]?\n *2.一位0-9都可以，多位首位不能为0\t(\\d|([1-9]\\d+)) 要不然就是0-9，要不然就是1-9开头，然后重复多次0-9。\n *3.小数部分，可能有，可能没有，一旦有，后面必须有小数点加数字 （\\.\\d+）? 以小数点.开头，一段数字结尾，并重复0到1次\n */")]),t._v("\n \nreg"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/^[+-]?(\\d|([1-9]\\d+))(\\.\\d+)?$/")]),t._v("\n\n")])])]),s("h4",{attrs:{id:"_2，验证密码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2，验证密码"}},[t._v("#")]),t._v(" 2，验证密码")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("，数字字母下划线\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("，"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("15")]),t._v("位\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("input"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" reg"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/^\\w{6-16}$/")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" flag"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("reg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nflag"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'符合密码规则'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nflag"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'不符合密码规则'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h4",{attrs:{id:"_3，验证真实姓名"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3，验证真实姓名"}},[t._v("#")]),t._v(" 3，验证真实姓名")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//1，尼古拉斯·赵四")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//2，汉字的正则 ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" reg"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/^[\\u4E00-\\U9FA5]$/")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//3，长度2-10位")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//4，可能有译名\t·汉字")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" reg"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/^[\\u4E00-\\U9FA5]{2,10}(·[\\u4E00-\\u9FA5]{2,10}){0,2}$/")]),t._v("\n\n")])])]),s("h4",{attrs:{id:"_4，验证邮箱"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4，验证邮箱"}},[t._v("#")]),t._v(" 4，验证邮箱")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" reg"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/^\\w+ ((-\\w+)|(\\.\\w+))* @[A-Za-z0-9]+ ((\\.|-)[A-Za-z0-9]+)* \\.[A-Za-z0-9]+$/")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//开头是数字字母下划线")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//@符之前是数字字母下划线和.组成0到多次")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//@")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//@符之后是数字字母出现一到多位")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//之后是-或者. 跟着数字字母 0到多次")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//最后是.com .cn .org .net .edu这种，由点开始出现一到多次")]),t._v("\n\n举例：\nlancelotfan@"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("163.")]),t._v("com"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cn\nzxt@zhufeng"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("peixun"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("office"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com\n\n")])])]),s("h4",{attrs:{id:"_5，身份证号码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5，身份证号码"}},[t._v("#")]),t._v(" 5，身份证号码")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('//规则分析\n//长度18位\n//最后一位可能是X\n由这两个规则导出的正则：\nlet reg=/^\\d{17}(\\d|X)$/\n\n//身份证前六位：省市县 34 26 22\n//中间八位：出生年月日\n//最后四位： 最后一位：X|数字\n\t\t   倒数第二位：偶数女，奇数男\n\t\t   其余的是前面的14位，经过算法算出来的\n\n//小括号第二个作用，分组捕获，不仅可以把大正则匹配的信息捕获到，还能捕获到每个小分组的内容\nlet reg=/^(\\d{6})(\\d{4})(\\d{2})(\\d{2})\\d{2}(\\d)(\\d|X)$/\nreg.exec(\'342622199107172956\')\n输出结果\n["342622199107172956", "342622", "1991", "07", "17", "5", "6", index: 0, input: "342622199107172956", groups: undefined]\n\n')])])])])}),[],!1,null,null,null);a.default=e.exports}}]);